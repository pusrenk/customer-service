// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/pusrenk/customer-service/internal/customers/entitites"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCustomerRepository creates a new instance of MockCustomerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerRepository {
	mock := &MockCustomerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCustomerRepository is an autogenerated mock type for the CustomerRepository type
type MockCustomerRepository struct {
	mock.Mock
}

type MockCustomerRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerRepository) EXPECT() *MockCustomerRepository_Expecter {
	return &MockCustomerRepository_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) CreateCustomer(customer *entitites.Customer) error {
	ret := _mock.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entitites.Customer) error); ok {
		r0 = returnFunc(customer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCustomerRepository_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockCustomerRepository_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - customer *entitites.Customer
func (_e *MockCustomerRepository_Expecter) CreateCustomer(customer interface{}) *MockCustomerRepository_CreateCustomer_Call {
	return &MockCustomerRepository_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", customer)}
}

func (_c *MockCustomerRepository_CreateCustomer_Call) Run(run func(customer *entitites.Customer)) *MockCustomerRepository_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entitites.Customer
		if args[0] != nil {
			arg0 = args[0].(*entitites.Customer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_CreateCustomer_Call) Return(err error) *MockCustomerRepository_CreateCustomer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCustomerRepository_CreateCustomer_Call) RunAndReturn(run func(customer *entitites.Customer) error) *MockCustomerRepository_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomer provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) DeleteCustomer(id uint) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uint) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCustomerRepository_DeleteCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomer'
type MockCustomerRepository_DeleteCustomer_Call struct {
	*mock.Call
}

// DeleteCustomer is a helper method to define mock.On call
//   - id uint
func (_e *MockCustomerRepository_Expecter) DeleteCustomer(id interface{}) *MockCustomerRepository_DeleteCustomer_Call {
	return &MockCustomerRepository_DeleteCustomer_Call{Call: _e.mock.On("DeleteCustomer", id)}
}

func (_c *MockCustomerRepository_DeleteCustomer_Call) Run(run func(id uint)) *MockCustomerRepository_DeleteCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_DeleteCustomer_Call) Return(err error) *MockCustomerRepository_DeleteCustomer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCustomerRepository_DeleteCustomer_Call) RunAndReturn(run func(id uint) error) *MockCustomerRepository_DeleteCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllCustomers provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) GetAllCustomers() ([]*entitites.Customer, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCustomers")
	}

	var r0 []*entitites.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]*entitites.Customer, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []*entitites.Customer); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entitites.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerRepository_GetAllCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllCustomers'
type MockCustomerRepository_GetAllCustomers_Call struct {
	*mock.Call
}

// GetAllCustomers is a helper method to define mock.On call
func (_e *MockCustomerRepository_Expecter) GetAllCustomers() *MockCustomerRepository_GetAllCustomers_Call {
	return &MockCustomerRepository_GetAllCustomers_Call{Call: _e.mock.On("GetAllCustomers")}
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) Run(run func()) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) Return(customers []*entitites.Customer, err error) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *MockCustomerRepository_GetAllCustomers_Call) RunAndReturn(run func() ([]*entitites.Customer, error)) *MockCustomerRepository_GetAllCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomerByID provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) GetCustomerByID(id uint) (*entitites.Customer, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerByID")
	}

	var r0 *entitites.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uint) (*entitites.Customer, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uint) *entitites.Customer); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entitites.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uint) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerRepository_GetCustomerByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomerByID'
type MockCustomerRepository_GetCustomerByID_Call struct {
	*mock.Call
}

// GetCustomerByID is a helper method to define mock.On call
//   - id uint
func (_e *MockCustomerRepository_Expecter) GetCustomerByID(id interface{}) *MockCustomerRepository_GetCustomerByID_Call {
	return &MockCustomerRepository_GetCustomerByID_Call{Call: _e.mock.On("GetCustomerByID", id)}
}

func (_c *MockCustomerRepository_GetCustomerByID_Call) Run(run func(id uint)) *MockCustomerRepository_GetCustomerByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uint
		if args[0] != nil {
			arg0 = args[0].(uint)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_GetCustomerByID_Call) Return(customer *entitites.Customer, err error) *MockCustomerRepository_GetCustomerByID_Call {
	_c.Call.Return(customer, err)
	return _c
}

func (_c *MockCustomerRepository_GetCustomerByID_Call) RunAndReturn(run func(id uint) (*entitites.Customer, error)) *MockCustomerRepository_GetCustomerByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCustomer provides a mock function for the type MockCustomerRepository
func (_mock *MockCustomerRepository) UpdateCustomer(customer *entitites.Customer) error {
	ret := _mock.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entitites.Customer) error); ok {
		r0 = returnFunc(customer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCustomerRepository_UpdateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCustomer'
type MockCustomerRepository_UpdateCustomer_Call struct {
	*mock.Call
}

// UpdateCustomer is a helper method to define mock.On call
//   - customer *entitites.Customer
func (_e *MockCustomerRepository_Expecter) UpdateCustomer(customer interface{}) *MockCustomerRepository_UpdateCustomer_Call {
	return &MockCustomerRepository_UpdateCustomer_Call{Call: _e.mock.On("UpdateCustomer", customer)}
}

func (_c *MockCustomerRepository_UpdateCustomer_Call) Run(run func(customer *entitites.Customer)) *MockCustomerRepository_UpdateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *entitites.Customer
		if args[0] != nil {
			arg0 = args[0].(*entitites.Customer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerRepository_UpdateCustomer_Call) Return(err error) *MockCustomerRepository_UpdateCustomer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCustomerRepository_UpdateCustomer_Call) RunAndReturn(run func(customer *entitites.Customer) error) *MockCustomerRepository_UpdateCustomer_Call {
	_c.Call.Return(run)
	return _c
}
